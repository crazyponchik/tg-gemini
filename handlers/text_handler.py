import logging
import os
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ai_client import AIClient
from database import (
    get_user, create_or_update_user, add_message, get_chat_history,
    clear_chat_history, export_chat_history, add_scheduled_message
)
from config import load_config, config

logger = logging.getLogger(__name__)
config = load_config()

async def handle_text_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    summarize: bool = False,
    export: bool = False,
    clear: bool = False,
    change_mode: bool = False,
    template: bool = False,
    schedule: bool = False,
    voice: bool = False
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_or_update_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user(user.id)
    settings = user_info.get('settings', {})
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if summarize:
        await handle_summary(update, context)
        return
    elif export:
        await handle_export(update, context)
        return
    elif clear:
        await handle_clear_history(update, context)
        return
    elif change_mode:
        await handle_change_mode(update, context)
        return
    elif template:
        await handle_template(update, context)
        return
    elif schedule:
        await handle_schedule(update, context)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç
    if voice:
        voice_file = await update.message.voice.get_file()
        voice_path = f"temp_voice_{user.id}_{int(time.time())}.ogg"
        await voice_file.download_to_drive(voice_path)
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É SpeechRecognition –∏–ª–∏ Whisper API
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_path):
            os.remove(voice_path)
        
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_message(
        user_id=user.id,
        role="user",
        content=message_text,
        message_type="text"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    chat_history = get_chat_history(user.id, limit=10)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç AI
    ai_client = AIClient()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conversation_mode = settings.get('conversation_mode', 'friendly')
    system_prompt = config.CONVERSATION_MODES[conversation_mode]["system_prompt"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
    system_message = {
        "role": "system",
        "content": [{"type": "text", "text": system_prompt}]
    }
    
    messages = [system_message] + chat_history
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    response = ai_client.generate_response(
        user_id=user.id,
        messages=messages,
        model=settings.get('model', config.DEFAULT_MODEL),
        temperature=settings.get('temperature', config.DEFAULT_TEMP),
        max_tokens=settings.get('max_tokens', config.DEFAULT_MAX_TOKENS)
    )
    
    if response:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_message(
            user_id=user.id,
            role="assistant",
            content=response,
            message_type="text"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=chat_id, text=response)
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await context.bot.send_message(
            chat_id=chat_id,
            text="üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summary"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = get_chat_history(user.id, limit=20)
    
    if not chat_history:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user(user.id)
    settings = user_info.get('settings', {})
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    history_text = ""
    for msg in chat_history:
        role = msg.get("role", "")
        content = msg.get("content", [])
        
        if role == "user":
            author = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif role == "assistant":
            author = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        else:
            continue
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        text = ""
        for item in content:
            if item.get("type") == "text":
                text += item.get("text", "")
        
        history_text += f"{author}: {text}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    summary_prompt = [
        {
            "role": "system",
            "content": [{"type": "text", "text": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∫—Ä–∞—Ç–∫–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."}]
        },
        {
            "role": "user",
            "content": [{"type": "text", "text": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä:\n\n{history_text}"}]
        }
    ]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç AI
    ai_client = AIClient()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    summary = ai_client.generate_response(
        user_id=user.id,
        messages=summary_prompt,
        model=settings.get('model', config.DEFAULT_MODEL),
        temperature=0.3,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        max_tokens=500  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    
    if summary:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üìù *–°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:*\n\n{summary}",
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text="üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("–¢–µ–∫—Å—Ç (TXT)", callback_data="export_text"),
            InlineKeyboardButton("JSON", callback_data="export_json")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:",
        reply_markup=reply_markup
    )

async def handle_clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=reply_markup
    )

async def handle_change_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mode"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∂–∏–º–∞–º–∏
    keyboard = []
    row = []
    
    for i, (mode_name, mode_info) in enumerate(config.CONVERSATION_MODES.items()):
        if i > 0 and i % 2 == 0:
            keyboard.append(row)
            row = []
        
        row.append(InlineKeyboardButton(
            mode_info["description"], 
            callback_data=f"mode_{mode_name}"
        ))
    
    if row:
        keyboard.append(row)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    user_info = get_user(user.id)
    settings = user_info.get('settings', {})
    current_mode = settings.get('conversation_mode', 'friendly')
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{config.CONVERSATION_MODES[current_mode]['description']}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /template"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = context.args
    
    if not args:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        template_list = "\n".join([
            f"‚Ä¢ *{name}*: {template[:50]}..." 
            for name, template in config.TEMPLATES.items()
        ])
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n{template_list}\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /template [–Ω–∞–∑–≤–∞–Ω–∏–µ]",
            parse_mode="Markdown"
        )
        return
    
    template_name = args[0].lower()
    
    if template_name == "list":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        template_list = "\n\n".join([
            f"*{name}*:\n{template}" 
            for name, template in config.TEMPLATES.items()
        ])
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üìù –®–∞–±–ª–æ–Ω—ã:\n\n{template_list}",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω
    if template_name not in config.TEMPLATES:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /template list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"template_cancel")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["selected_template"] = template_name
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω '*{template_name}*'.\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = context.args
    
    if not args:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç.\n\n"
                 "–§–æ—Ä–º–∞—Ç: /schedule [–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú] [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]\n\n"
                 "–ü—Ä–∏–º–µ—Ä: /schedule 15:30 –ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É",
            parse_mode="Markdown"
        )
        return
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç (–≤—Ä–µ–º—è), —Ç–æ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    if len(args) == 1:
        time_str = args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            scheduled_time = datetime.strptime(time_str, "%H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            now = datetime.now()
            scheduled_datetime = datetime(
                year=now.year,
                month=now.month,
                day=now.day,
                hour=scheduled_time.hour,
                minute=scheduled_time.minute
            )
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å
            if scheduled_datetime < now:
                scheduled_datetime = scheduled_datetime.replace(day=scheduled_datetime.day + 1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data["scheduled_time"] = int(scheduled_datetime.timestamp())
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{time_str}*. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
                parse_mode="Markdown"
            )
            
        except ValueError:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30"
            )
        
        return
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    time_str = args[0]
    message_text = " ".join(args[1:])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        scheduled_time = datetime.strptime(time_str, "%H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        now = datetime.now()
        scheduled_datetime = datetime(
            year=now.year,
            month=now.month,
            day=now.day,
            hour=scheduled_time.hour,
            minute=scheduled_time.minute
        )
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å
        if scheduled_datetime < now:
            scheduled_datetime = scheduled_datetime.replace(day=scheduled_datetime.day + 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        scheduled_time_unix = int(scheduled_datetime.timestamp())
        
        message_id = add_scheduled_message(
            user_id=user.id,
            content=message_text,
            scheduled_time=scheduled_time_unix
        )
        
        local_time_str = scheduled_datetime.strftime("%H:%M")
        date_str = scheduled_datetime.strftime("%d.%m.%Y")
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ *{date_str}* –≤ *{local_time_str}*.\n\n"
                 f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30"
        )
